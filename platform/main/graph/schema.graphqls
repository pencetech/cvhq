# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type UserBio {
  firstName: String!
  lastName: String!
  email: String!
  phone: String!
  address: String!
}

type JobPosting {
  title: String!
  company: String!
  sector: String!
  requirements: String!
  addOn: String
}

type Experience {
  id: ID
  title: String!
  company: String!
  sector:  String!
  isCurrent: Boolean!
  startDate: String!
  endDate: String
  achievements: String!
}

type Education {
  id: ID
  subject: String!
  institution: String!
  degree: String!
  startDate: String!
  endDate: String!
}

type CVContent {
  userBio: UserBio!
  summary: Summary!
  experiences: [Experience!]!
  education: [Education!]!
  skillsets: Skillset
}

input CVContentInput {
  userBio: UserBioInput!
  summary: SummaryInput!
  experiences: [ExperienceInput!]!
  education: [EducationInput!]!
  skillsets: SkillsetInput
}

input CvInput {
  id: ID
  cvContent: CVContentInput!
  jobPosting: JobPostingInput!
  cvType: CvType
}

type Cv {
  id: ID
  cvContent: CVContent!
  jobPosting: JobPosting!
  cvType: CvType
}

type Skillset {
  skillsets: String!
}

type Summary {
  summary: String!
}

type Match {
  matchFactor: Int
  reason: String!
}

input UserBioInput {
  firstName: String!
  lastName: String!
  email: String!
  phone: String!
  address: String!
}

input JobPostingInput {
  title: String!
  company: String!
  sector: String!
  requirements: String!
  addOn: String
}

input ExperienceInput {
  id: ID
  title: String!
  company: String!
  sector:  String!
  isCurrent: Boolean!
  startDate: String!
  endDate: String
  achievements: String!
}

input EducationInput {
  id: ID
  subject: String!
  institution: String!
  degree: String!
  startDate: String!
  endDate: String!
}

input SkillsetInput {
  skillsets: String!
}

input SummaryInput {
  summary: String!
}

type CvFile {
  filename: String!
  createdAt: String!
}

input AchievementInput {
  userBio: UserBioInput!
  jobPosting: JobPostingInput!
  experience: ExperienceInput!
}

type EnhancedAchievement {
  match: Match!
  achievements: String!
}

type Query {
  filename: [CvFile!]!
  summary(id: ID!): Summary!
}

type Mutation {
  enhanceAchievement(input: AchievementInput!): EnhancedAchievement!
  generateCV(input: CvInput!): CvFile! # With summary check!
  generateSummary(input: CvInput!): Summary!
}

enum CvType {
  BASE
  PRIME
}
